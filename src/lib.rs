#![recursion_limit = "256"]

use pyo3::prelude::*;
use pyo3::wrap_pyfunction;
mod json_builder;
mod shared_types;
mod type_conversions;
mod y_array;
mod y_doc;
mod y_map;
mod y_text;
mod y_transaction;
mod y_xml;
use crate::y_doc::*;

/// Python bindings for Y.rs
#[pymodule]
pub fn y_py(_py: Python, m: &PyModule) -> PyResult<()> {
    m.add("__version__", env!("CARGO_PKG_VERSION"))?;

    // Data Types
    m.add_class::<y_doc::YDoc>()?;
    m.add_class::<y_transaction::YTransaction>()?;
    m.add_class::<y_text::YText>()?;
    m.add_class::<y_array::YArray>()?;
    m.add_class::<y_map::YMap>()?;
    m.add_class::<y_xml::YXmlText>()?;
    m.add_class::<y_xml::YXmlElement>()?;
    m.add_class::<y_xml::YXmlFragment>()?;
    // Events
    m.add_class::<y_text::YTextEvent>()?;
    m.add_class::<y_array::YArrayEvent>()?;
    m.add_class::<y_map::YMapEvent>()?;
    m.add_class::<y_xml::YXmlTextEvent>()?;
    m.add_class::<y_xml::YXmlEvent>()?;
    m.add_class::<y_doc::AfterTransactionEvent>()?;
    // Functions
    m.add_wrapped(wrap_pyfunction!(encode_state_vector))?;
    m.add_wrapped(wrap_pyfunction!(encode_state_as_update))?;
    m.add_wrapped(wrap_pyfunction!(apply_update))?;
    m.add_wrapped(wrap_pyfunction!(update_to_nodes))?;
    Ok(())
}

#[cfg(test)]
mod test {
    use crate::y_doc::process_doc;
    use assert_json_diff::assert_json_eq;
    use lib0::any::Any;
    use serde_json::{from_str, json, to_string_pretty, Value};

    #[test]
    fn parse_nested_xml_text_nodes() {
        let raw_lexical_state_as_update: Vec<u8> = vec![
            1, 97, 156, 181, 228, 207, 14, 0, 40, 1, 4, 114, 111, 111, 116, 5, 95, 95, 100, 105,
            114, 1, 119, 3, 108, 116, 114, 7, 1, 4, 114, 111, 111, 116, 6, 40, 0, 156, 181, 228,
            207, 14, 1, 6, 95, 95, 116, 121, 112, 101, 1, 119, 9, 112, 97, 114, 97, 103, 114, 97,
            112, 104, 40, 0, 156, 181, 228, 207, 14, 1, 8, 95, 95, 102, 111, 114, 109, 97, 116, 1,
            125, 0, 40, 0, 156, 181, 228, 207, 14, 1, 8, 95, 95, 105, 110, 100, 101, 110, 116, 1,
            125, 0, 40, 0, 156, 181, 228, 207, 14, 1, 5, 95, 95, 100, 105, 114, 1, 119, 3, 108,
            116, 114, 7, 0, 156, 181, 228, 207, 14, 1, 1, 40, 0, 156, 181, 228, 207, 14, 6, 6, 95,
            95, 116, 121, 112, 101, 1, 119, 4, 116, 101, 120, 116, 40, 0, 156, 181, 228, 207, 14,
            6, 8, 95, 95, 102, 111, 114, 109, 97, 116, 1, 125, 0, 40, 0, 156, 181, 228, 207, 14, 6,
            7, 95, 95, 115, 116, 121, 108, 101, 1, 119, 0, 40, 0, 156, 181, 228, 207, 14, 6, 6, 95,
            95, 109, 111, 100, 101, 1, 125, 0, 40, 0, 156, 181, 228, 207, 14, 6, 8, 95, 95, 100,
            101, 116, 97, 105, 108, 1, 125, 0, 132, 156, 181, 228, 207, 14, 6, 1, 97, 135, 156,
            181, 228, 207, 14, 1, 6, 40, 0, 156, 181, 228, 207, 14, 13, 6, 95, 95, 116, 121, 112,
            101, 1, 119, 4, 108, 105, 115, 116, 40, 0, 156, 181, 228, 207, 14, 13, 8, 95, 95, 102,
            111, 114, 109, 97, 116, 1, 125, 0, 40, 0, 156, 181, 228, 207, 14, 13, 8, 95, 95, 105,
            110, 100, 101, 110, 116, 1, 125, 0, 33, 0, 156, 181, 228, 207, 14, 13, 5, 95, 95, 100,
            105, 114, 1, 40, 0, 156, 181, 228, 207, 14, 13, 10, 95, 95, 108, 105, 115, 116, 84,
            121, 112, 101, 1, 119, 6, 110, 117, 109, 98, 101, 114, 40, 0, 156, 181, 228, 207, 14,
            13, 5, 95, 95, 116, 97, 103, 1, 119, 2, 111, 108, 40, 0, 156, 181, 228, 207, 14, 13, 7,
            95, 95, 115, 116, 97, 114, 116, 1, 125, 1, 7, 0, 156, 181, 228, 207, 14, 13, 6, 40, 0,
            156, 181, 228, 207, 14, 21, 6, 95, 95, 116, 121, 112, 101, 1, 119, 8, 108, 105, 115,
            116, 105, 116, 101, 109, 40, 0, 156, 181, 228, 207, 14, 21, 8, 95, 95, 102, 111, 114,
            109, 97, 116, 1, 125, 0, 40, 0, 156, 181, 228, 207, 14, 21, 8, 95, 95, 105, 110, 100,
            101, 110, 116, 1, 125, 0, 33, 0, 156, 181, 228, 207, 14, 21, 5, 95, 95, 100, 105, 114,
            1, 40, 0, 156, 181, 228, 207, 14, 21, 7, 95, 95, 118, 97, 108, 117, 101, 1, 125, 1, 1,
            0, 156, 181, 228, 207, 14, 21, 1, 0, 5, 129, 156, 181, 228, 207, 14, 27, 1, 132, 156,
            181, 228, 207, 14, 12, 1, 32, 135, 156, 181, 228, 207, 14, 34, 1, 40, 0, 156, 181, 228,
            207, 14, 35, 6, 95, 95, 116, 121, 112, 101, 1, 119, 4, 116, 101, 120, 116, 40, 0, 156,
            181, 228, 207, 14, 35, 8, 95, 95, 102, 111, 114, 109, 97, 116, 1, 125, 1, 40, 0, 156,
            181, 228, 207, 14, 35, 7, 95, 95, 115, 116, 121, 108, 101, 1, 119, 0, 40, 0, 156, 181,
            228, 207, 14, 35, 6, 95, 95, 109, 111, 100, 101, 1, 125, 0, 40, 0, 156, 181, 228, 207,
            14, 35, 8, 95, 95, 100, 101, 116, 97, 105, 108, 1, 125, 0, 132, 156, 181, 228, 207, 14,
            35, 1, 98, 161, 156, 181, 228, 207, 14, 17, 1, 161, 156, 181, 228, 207, 14, 25, 1, 168,
            156, 181, 228, 207, 14, 42, 1, 119, 3, 108, 116, 114, 168, 156, 181, 228, 207, 14, 43,
            1, 119, 3, 108, 116, 114, 135, 156, 181, 228, 207, 14, 33, 1, 40, 0, 156, 181, 228,
            207, 14, 46, 6, 95, 95, 116, 121, 112, 101, 1, 119, 4, 116, 101, 120, 116, 40, 0, 156,
            181, 228, 207, 14, 46, 8, 95, 95, 102, 111, 114, 109, 97, 116, 1, 125, 0, 40, 0, 156,
            181, 228, 207, 14, 46, 7, 95, 95, 115, 116, 121, 108, 101, 1, 119, 0, 40, 0, 156, 181,
            228, 207, 14, 46, 6, 95, 95, 109, 111, 100, 101, 1, 125, 0, 40, 0, 156, 181, 228, 207,
            14, 46, 8, 95, 95, 100, 101, 116, 97, 105, 108, 1, 125, 0, 132, 156, 181, 228, 207, 14,
            46, 1, 99, 129, 156, 181, 228, 207, 14, 21, 1, 0, 5, 135, 156, 181, 228, 207, 14, 53,
            6, 40, 0, 156, 181, 228, 207, 14, 59, 6, 95, 95, 116, 121, 112, 101, 1, 119, 8, 108,
            105, 115, 116, 105, 116, 101, 109, 40, 0, 156, 181, 228, 207, 14, 59, 8, 95, 95, 102,
            111, 114, 109, 97, 116, 1, 125, 0, 40, 0, 156, 181, 228, 207, 14, 59, 8, 95, 95, 105,
            110, 100, 101, 110, 116, 1, 125, 0, 33, 0, 156, 181, 228, 207, 14, 59, 5, 95, 95, 100,
            105, 114, 1, 40, 0, 156, 181, 228, 207, 14, 59, 7, 95, 95, 118, 97, 108, 117, 101, 1,
            125, 2, 7, 0, 156, 181, 228, 207, 14, 59, 6, 40, 0, 156, 181, 228, 207, 14, 65, 6, 95,
            95, 116, 121, 112, 101, 1, 119, 4, 108, 105, 115, 116, 40, 0, 156, 181, 228, 207, 14,
            65, 8, 95, 95, 102, 111, 114, 109, 97, 116, 1, 125, 0, 40, 0, 156, 181, 228, 207, 14,
            65, 8, 95, 95, 105, 110, 100, 101, 110, 116, 1, 125, 0, 40, 0, 156, 181, 228, 207, 14,
            65, 5, 95, 95, 100, 105, 114, 1, 119, 3, 108, 116, 114, 40, 0, 156, 181, 228, 207, 14,
            65, 10, 95, 95, 108, 105, 115, 116, 84, 121, 112, 101, 1, 119, 6, 110, 117, 109, 98,
            101, 114, 40, 0, 156, 181, 228, 207, 14, 65, 5, 95, 95, 116, 97, 103, 1, 119, 2, 111,
            108, 40, 0, 156, 181, 228, 207, 14, 65, 7, 95, 95, 115, 116, 97, 114, 116, 1, 125, 1,
            7, 0, 156, 181, 228, 207, 14, 65, 6, 40, 0, 156, 181, 228, 207, 14, 73, 6, 95, 95, 116,
            121, 112, 101, 1, 119, 8, 108, 105, 115, 116, 105, 116, 101, 109, 40, 0, 156, 181, 228,
            207, 14, 73, 8, 95, 95, 102, 111, 114, 109, 97, 116, 1, 125, 0, 40, 0, 156, 181, 228,
            207, 14, 73, 8, 95, 95, 105, 110, 100, 101, 110, 116, 1, 125, 0, 33, 0, 156, 181, 228,
            207, 14, 73, 5, 95, 95, 100, 105, 114, 1, 40, 0, 156, 181, 228, 207, 14, 73, 7, 95, 95,
            118, 97, 108, 117, 101, 1, 125, 1, 168, 156, 181, 228, 207, 14, 77, 1, 119, 3, 108,
            116, 114, 7, 0, 156, 181, 228, 207, 14, 73, 1, 40, 0, 156, 181, 228, 207, 14, 80, 6,
            95, 95, 116, 121, 112, 101, 1, 119, 4, 116, 101, 120, 116, 40, 0, 156, 181, 228, 207,
            14, 80, 8, 95, 95, 102, 111, 114, 109, 97, 116, 1, 125, 0, 40, 0, 156, 181, 228, 207,
            14, 80, 7, 95, 95, 115, 116, 121, 108, 101, 1, 119, 0, 40, 0, 156, 181, 228, 207, 14,
            80, 6, 95, 95, 109, 111, 100, 101, 1, 125, 0, 40, 0, 156, 181, 228, 207, 14, 80, 8, 95,
            95, 100, 101, 116, 97, 105, 108, 1, 125, 0, 132, 156, 181, 228, 207, 14, 80, 1, 100,
            129, 156, 181, 228, 207, 14, 73, 1, 0, 5, 129, 156, 181, 228, 207, 14, 59, 1, 0, 5,
            168, 156, 181, 228, 207, 14, 63, 1, 126, 135, 156, 181, 228, 207, 14, 13, 6, 40, 0,
            156, 181, 228, 207, 14, 100, 6, 95, 95, 116, 121, 112, 101, 1, 119, 9, 112, 97, 114,
            97, 103, 114, 97, 112, 104, 40, 0, 156, 181, 228, 207, 14, 100, 8, 95, 95, 102, 111,
            114, 109, 97, 116, 1, 125, 0, 40, 0, 156, 181, 228, 207, 14, 100, 8, 95, 95, 105, 110,
            100, 101, 110, 116, 1, 125, 0, 33, 0, 156, 181, 228, 207, 14, 100, 5, 95, 95, 100, 105,
            114, 1, 168, 156, 181, 228, 207, 14, 104, 1, 119, 3, 108, 116, 114, 7, 0, 156, 181,
            228, 207, 14, 100, 1, 40, 0, 156, 181, 228, 207, 14, 106, 6, 95, 95, 116, 121, 112,
            101, 1, 119, 4, 116, 101, 120, 116, 40, 0, 156, 181, 228, 207, 14, 106, 8, 95, 95, 102,
            111, 114, 109, 97, 116, 1, 125, 0, 40, 0, 156, 181, 228, 207, 14, 106, 7, 95, 95, 115,
            116, 121, 108, 101, 1, 119, 0, 40, 0, 156, 181, 228, 207, 14, 106, 6, 95, 95, 109, 111,
            100, 101, 1, 125, 0, 40, 0, 156, 181, 228, 207, 14, 106, 8, 95, 95, 100, 101, 116, 97,
            105, 108, 1, 125, 0, 132, 156, 181, 228, 207, 14, 106, 1, 101, 1, 156, 181, 228, 207,
            14, 9, 17, 1, 25, 1, 27, 7, 42, 2, 53, 6, 63, 1, 77, 1, 87, 12, 104, 1,
        ];
        let expected_json: Value = json!({
            "__dir": "ltr",
            "children": [
                {
                    "__type": "paragraph",
                    "__format": 0,
                    "__indent": 0,
                    "__dir": "ltr",
                    "children": [
                        {
                            "__type": "text",
                            "__format": 0,
                            "__style": "",
                            "__mode": 0,
                            "__detail": 0,
                            "text": "a "
                        },
                        {
                            "__type": "text",
                            "__format": 1,
                            "__style": "",
                            "__mode": 0,
                            "__detail": 0,
                            "text": "b"
                        }
                    ]
                },
                {
                    "__type": "list",
                    "__format": 0,
                    "__indent": 0,
                    "__dir": "ltr",
                    "__listType": "number",
                    "__tag": "ol",
                    "__start": 1,
                    "children": [
                        {
                            "__type": "listitem",
                            "__format": 0,
                            "__indent": 0,
                            "__dir": "ltr",
                            "__value": 1,
                            "children": [
                                {
                                    "__type": "text",
                                    "__format": 0,
                                    "__style": "",
                                    "__mode": 0,
                                    "__detail": 0,
                                    "text": "c"
                                }
                            ]
                        },
                        {
                            "__type": "listitem",
                            "__format": 0,
                            "__indent": 0,
                            "__dir": null,
                            "__value": 2,
                            "children": [
                                {
                                    "__type": "list",
                                    "__format": 0,
                                    "__indent": 0,
                                    "__dir": "ltr",
                                    "__listType": "number",
                                    "__tag": "ol",
                                    "__start": 1,
                                    "children": [
                                        {
                                            "__type": "listitem",
                                            "__format": 0,
                                            "__indent": 0,
                                            "__dir": "ltr",
                                            "__value": 1,
                                            "children": [
                                                {
                                                    "__type": "text",
                                                    "__format": 0,
                                                    "__style": "",
                                                    "__mode": 0,
                                                    "__detail": 0,
                                                    "text": "d"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "__type": "paragraph",
                    "__format": 0,
                    "__indent": 0,
                    "__dir": "ltr",
                    "children": [
                        {
                            "__type": "text",
                            "__format": 0,
                            "__style": "",
                            "__mode": 0,
                            "__detail": 0,
                            "text": "e"
                        }
                    ]
                }
            ]
        });

        let result = process_doc(raw_lexical_state_as_update);
        let mut result_buf = String::new();

        Any::Map(Box::new(result)).to_json(&mut result_buf);
        let result_json: Value = from_str(&result_buf).unwrap();

        println!("Result:\n{}", to_string_pretty(&result_json).unwrap());

        assert_json_eq!(result_json, expected_json);
    }
}
